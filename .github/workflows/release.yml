name: Build and Release dirdoc

on:
  push:
    tags:
      - '*.*.*'

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: ./.github/actions/checkout

      - name: Install dependencies
        run: |
          sudo apt-get update || true
          sudo apt-get install -y build-essential make curl unzip || true

      - name: Build dirdoc
        run: make all
        shell: bash

      - name: Create Windows executable copy
        run: |
          cp build/dirdoc ./dirdoc
          chmod +x ./dirdoc
          cp dirdoc dirdoc.exe
          # Verify files exist and have proper permissions
          ls -la dirdoc*

      - name: Check if running in Act
        id: check_act
        run: |
          if [ -n "$ACT" ] || [ -n "$GITHUB_ACTIONS_ACT" ]; then
            echo "Running in Act environment"
            echo "::set-output name=is_act::true"
          else
            echo "::set-output name=is_act::false"
          fi

      - name: Skip GitHub Release (Local Testing)
        if: steps.check_act.outputs.is_act == 'true'
        run: |
          echo "Skipping GitHub Release step when running locally with act"
          echo "The binaries have been created successfully:"
          ls -la dirdoc*
          
      - name: Create GitHub Release
        id: create_release
        if: steps.check_act.outputs.is_act != 'true' && github.event_name != 'pull_request'
        run: |
          # Get tag name from ref (refs/tags/v1.0.0 -> v1.0.0)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Create a release using GitHub CLI or curl
          RELEASE_RESPONSE=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$TAG_NAME\",\"body\":\"Automated release of dirdoc binary.\",\"draft\":false,\"prerelease\":false}")
          
          # Extract release ID
          RELEASE_ID=$(echo $RELEASE_RESPONSE | grep -o '"id": [0-9]*' | head -1 | cut -d' ' -f2)
          
          # Upload assets
          for ASSET in dirdoc dirdoc.exe; do
            if [ -f "$ASSET" ]; then
              echo "Uploading $ASSET to release $TAG_NAME"
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                -H "Accept: application/vnd.github.v3+json" \
                --data-binary @"$ASSET" \
                "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=$ASSET"
            else
              echo "Warning: Asset $ASSET not found"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
